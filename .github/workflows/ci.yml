name: CI

on:
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  changes:
    name: "Detect changes"
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changes.outputs.python }}
      tests: ${{ steps.changes.outputs.tests }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            python:
              - 'custom_components/**/*.py'
              - 'tests/**/*.py'
              - '*.py'
              - 'requirements.txt'
              - 'pyproject.toml'
              - '.ruff.toml'
              - 'noxfile.py'
            tests:
              - 'tests/**'
            workflows:
              - '.github/workflows/**'

  fast-feedback:
    name: "‚ö° Fast feedback"
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install minimal dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest aiohttp beautifulsoup4 ruff homeassistant pytest-asyncio

      - name: Quick lint check
        run: |
          echo "üîç Quick Ruff check..."
          ruff check . --select=E,W,F --output-format=github

      - name: Super fast API tests
        run: |
          echo "‚ö° Running super-fast API tests..."
          python fast_test.py

  comprehensive-check:
    name: "üß™ Comprehensive testing"
    runs-on: ubuntu-latest
    needs: [changes, fast-feedback]
    if: needs.changes.outputs.python == 'true'
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run comprehensive check script
        run: |
          echo "üî¨ Running comprehensive checks for Python ${{ matrix.python-version }}..."
          python check.py --coverage

      - name: Upload coverage
        if: matrix.python-version == '3.13'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ci-comprehensive
          name: ci-python-${{ matrix.python-version }}
          fail_ci_if_error: false

  nox-testing:
    name: "üéØ Nox test matrix"
    runs-on: ubuntu-latest
    needs: [changes, fast-feedback]
    if: needs.changes.outputs.tests == 'true' || needs.changes.outputs.python == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install nox
        run: python -m pip install nox

      - name: Run Nox test sessions
        run: |
          echo "üéØ Running Nox test matrix..."
          nox -s super-quick quick-test tests --verbose

  security-check:
    name: "üîí Security scanning"
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nox

      - name: Run security checks
        run: |
          echo "üîí Running security analysis..."
          nox -s safety

  pr-summary:
    name: "üìä PR Summary"
    runs-on: ubuntu-latest
    needs: [changes, fast-feedback, comprehensive-check, nox-testing, security-check]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Fast Feedback': '${{ needs.fast-feedback.result }}',
              'Comprehensive Check': '${{ needs.comprehensive-check.result }}',
              'Nox Testing': '${{ needs.nox-testing.result }}',
              'Security Check': '${{ needs.security-check.result }}'
            };

            const statusEmoji = {
              'success': '‚úÖ',
              'failure': '‚ùå',
              'cancelled': 'üî∂',
              'skipped': '‚è≠Ô∏è'
            };

            let comment = '## üß™ Test Results Summary\n\n';
            comment += '| Check | Status |\n';
            comment += '|-------|--------|\n';

            for (const [check, result] of Object.entries(results)) {
              const emoji = statusEmoji[result] || '‚ùì';
              comment += `| ${check} | ${emoji} ${result} |\n`;
            }

            comment += '\n### üöÄ Quick Development Workflow\n';
            comment += '- **Super fast feedback**: `python fast_test.py` (API tests only, ~0.5s)\n';
            comment += '- **Quick tests**: `make test-api` (API tests with pytest, ~1s)\n';
            comment += '- **Full suite**: `make test` (all tests)\n';
            comment += '- **With coverage**: `python check.py --coverage`\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
